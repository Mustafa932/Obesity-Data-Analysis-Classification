# -*- coding: utf-8 -*-
"""Colaboratory'ye Hoş Geldiniz adlı not defterinin kopyası

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a0NTjLb5aV_nRGAo0OHCU7NBA01EKAur
"""

import pandas as pd

# Veri setini yükleme
data = pd.read_csv('/content/ObesityDataSet_raw_and_data_sinthetic (1).csv')

# Eksik veri analizi
missing_data = data.isnull().sum()
missing_data_percentage = (missing_data / len(data)) * 100

print("Eksik Veri Sayısı:\n", missing_data)
print("\nEksik Veri Yüzdesi:\n", missing_data_percentage)

# Eksik verileri ortalama ile doldurma (sayısal sütunlar için)
data['Weight'] = data['Weight'].fillna(data['Weight'].mean())

# Eksik verileri en sık görülen değer ile doldurma (kategorik sütunlar için)
data['Gender'] = data['Gender'].fillna(data['Gender'].mode()[0])

# One-Hot Encoding
data = pd.get_dummies(data, columns=['Gender', 'family_history_with_overweight'], drop_first=True)

# Label Encoding
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
data['FAVC'] = encoder.fit_transform(data['FAVC'])

from sklearn.preprocessing import MinMaxScaler

# Min-Max Normalizasyonu
scaler = MinMaxScaler()
data[['Weight', 'Height']] = scaler.fit_transform(data[['Weight', 'Height']])

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

# Veri setini yükleme
data = pd.read_csv('/content/ObesityDataSet_raw_and_data_sinthetic (1).csv')

# Kategorik sütunları Label Encoding ile sayısal hale getirme
categorical_cols = ['Gender', 'family_history_with_overweight', 'FAVC', 'CAEC', 'SMOKE', 'SCC', 'CALC', 'MTRANS', 'NObeyesdad']  # Kategorik sütunların listesi
for col in categorical_cols:
    encoder = LabelEncoder()
    data[col] = encoder.fit_transform(data[col])

# Özellikler ve hedef değişken
X = data.drop('NObeyesdad', axis=1)
y = data['NObeyesdad']

# Veri setini eğitim ve test kümelerine ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Lojistik Regresyon
logreg_model = LogisticRegression()
logreg_model.fit(X_train, y_train)
y_pred_logreg = logreg_model.predict(X_test)
accuracy_logreg = accuracy_score(y_test, y_pred_logreg)
print("Lojistik Regresyon Doğruluk:", accuracy_logreg)
print(classification_report(y_test, y_pred_logreg))

# Karar Ağacı
dt_model = DecisionTreeClassifier()
dt_model.fit(X_train, y_train)
y_pred_dt = dt_model.predict(X_test)
accuracy_dt = accuracy_score(y_test, y_pred_dt)
print("Karar Ağacı Doğruluk:", accuracy_dt)
print(classification_report(y_test, y_pred_dt))

# Rastgele Orman
rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
accuracy_rf = accuracy_score(y_test, y_pred_rf)
print("Rastgele Orman Doğruluk:", accuracy_rf)
print(classification_report(y_test, y_pred_rf))

# Görselleştirmeler
# Örnek 1: Sınıf Dağılımı
plt.figure(figsize=(8, 6))
sns.countplot(x='NObeyesdad', data=data)
plt.title('Sınıf Dağılımı')
plt.xlabel('Obezite Seviyesi')
plt.ylabel('Sayı')
plt.show()

# Örnek 2: Yaş ve Kilo Dağılımı
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Age', y='Weight', hue='NObeyesdad', data=data)
plt.title('Yaş ve Kilo Dağılımı')
plt.xlabel('Yaş')
plt.ylabel('Kilo')
plt.show()

# Örnek 3: Öznitelik Önemi (Rastgele Orman için)
feature_importances = pd.Series(rf_model.feature_importances_, index=X.columns)
feature_importances.nlargest(10).plot(kind='barh')
plt.title('Öznitelik Önemi (Rastgele Orman)')
plt.xlabel('Önem')
plt.ylabel('Öznitelik')
plt.show()
